package qinyuanliu.storesystemandroid.activity;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Bitmap;import android.os.Bundle;import android.os.Handler;import android.support.v7.app.AppCompatActivity;import android.text.TextUtils;import android.util.Log;import android.view.KeyEvent;import android.view.SurfaceHolder;import android.view.SurfaceHolder.Callback;import android.view.SurfaceView;import android.view.View;import android.widget.Button;import android.widget.RelativeLayout;import android.widget.Toast;import com.google.zxing.BarcodeFormat;import com.google.zxing.Result;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.Vector;import qinyuanliu.storesystemandroid.R;import qinyuanliu.storesystemandroid.common.Session;import qinyuanliu.storesystemandroid.http.Codes;import qinyuanliu.storesystemandroid.http.SCExceptionCodeList;import qinyuanliu.storesystemandroid.http.SCResponseListener;import qinyuanliu.storesystemandroid.http.SCResult;import qinyuanliu.storesystemandroid.http.SCSDK;import qinyuanliu.storesystemandroid.listener.RefreshTokenListener;import qinyuanliu.storesystemandroid.util.zxing.camera.CameraManager;import qinyuanliu.storesystemandroid.util.zxing.decoding.CaptureActivityHandler;import qinyuanliu.storesystemandroid.util.zxing.decoding.InactivityTimer;import qinyuanliu.storesystemandroid.util.zxing.view.ViewfinderView;public class MipcaActivityCapture extends AppCompatActivity implements Callback {    private CaptureActivityHandler handler;    private ViewfinderView viewfinderView;    private boolean hasSurface;    private Vector<BarcodeFormat> decodeFormats;    private String characterSet;    private InactivityTimer inactivityTimer;    private SurfaceView surfaceView;    private RelativeLayout jumpView;    //    private Button jumpButton;    private String jumpurl;    private Button btn_back;    //private TextView jumpMsg;    private boolean issingle = true;    private ArrayList<String> scanlist = new ArrayList<>();    @Override    public boolean dispatchKeyEvent(KeyEvent event) {        if (event.getKeyCode() == KeyEvent.KEYCODE_BACK                && event.getAction() == KeyEvent.ACTION_DOWN) {            if (!issingle) {                Intent data = new Intent();                data.putStringArrayListExtra("modellist", scanlist);                setResult(RESULT_OK, data);                finish();            }            return true;        }        return super.dispatchKeyEvent(event);    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        this.setContentView(R.layout.activity_scan);        issingle = getIntent().getBooleanExtra("isSingle", true);        btn_back = (Button) findViewById(R.id.btn_back);        btn_back.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent data = new Intent();                data.putStringArrayListExtra("modellist", scanlist);                setResult(RESULT_OK, data);                finish();            }        });        viewfinderView = (ViewfinderView) findViewById(R.id.viewfinder_view);        jumpView = (RelativeLayout) findViewById(R.id.jumptoadd);        surfaceView = (SurfaceView) findViewById(R.id.preview_view);        CameraManager.init(getApplication());        hasSurface = false;        inactivityTimer = new InactivityTimer(this);    }    @Override    protected void onResume() {        super.onResume();        SurfaceHolder surfaceHolder = surfaceView.getHolder();        if (hasSurface) {            initCamera(surfaceHolder);        } else {            surfaceHolder.addCallback(this);            surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);        }        decodeFormats = null;        characterSet = null;    }    @Override    protected void onPause() {        super.onPause();        if (handler != null) {            handler.quitSynchronously();            handler = null;        }        CameraManager.get().closeDriver();    }    @Override    protected void onDestroy() {        inactivityTimer.shutdown();        super.onDestroy();    }    /**     * 处理扫描结果     *     * @param result     * @param barcode     */    public void handleDecode(Result result, Bitmap barcode) {        inactivityTimer.onActivity();        String resultString = result.getText();        onResultHandler(resultString, barcode);    }    private void onResultHandler(String resultString, Bitmap bitmap) {        if (TextUtils.isEmpty(resultString)) {            Toast.makeText(MipcaActivityCapture.this, "扫码失败!", Toast.LENGTH_SHORT).show();            return;        }        //关闭扫描        if (handler != null) {            handler.quitSynchronously();            handler = null;        }        CameraManager.get().closeDriver();        String scanstr = null;        try {//              String utfstr = new String(resultString.getBytes("ISO-8859-1"), "UTF-8");                String gkbstr = new String(resultString.getBytes("ISO-8859-1"), "GB2312");                   if(gkbstr.contains("?")){                       if(gkbstr.substring(0,1).equals("?")) {                           scanstr = resultString.substring(1);                       }//                       if(resultString.contains("\ufeff")){//                           scanstr = resultString.substring(1);//                           Log.i("扫码中文utf======", scanstr);//                       }                       else{                           scanstr = resultString;                           Log.i("扫码utf======", scanstr);                       }                   }                   else{                       scanstr = gkbstr;                       Log.i("扫码gkb======",scanstr);                   }        } catch (UnsupportedEncodingException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        if (issingle) {            //显示跳转页面            inactivityTimer.shutdown();            jumpurl = scanstr;            System.out.println(jumpurl);            //判断是型号还是产品            Session.CheckRefreshToken(new RefreshTokenListener() {                @Override                public void RefreshTokenResult(final int resultcode) {                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            if (resultcode == Codes.Code_Success) {                                SCSDK.getInstance().GetTypeByScan(Session.getInstance().getShopCode(), jumpurl, Session.getInstance().getToken(), new SCResponseListener() {                                    @Override                                    public void onResult(Object result) {                                        final SCResult.ScanResult product = (SCResult.ScanResult) result;                                        runOnUiThread(new Runnable() {                                            @Override                                            public void run() {                                                // 0:产品  1：型号  3：批量条码扫码二维码                                                if (product.result == 0) {                                                    ShowProduct(product.valuecode);                                                } else if (product.result == 1) {                                                    ShowModel(product.valuecode);                                                } else if (product.result == 2) {                                                    ShowInout(product.valuecode);                                                }                                                else if (product.result == 3) {                                                    ShowBatch(product.valuecode);                                                }                                                else {                                                    Toast.makeText(MipcaActivityCapture.this, "无法识别!", Toast.LENGTH_SHORT).show();                                                }                                            }                                        });                                    }                                    @Override                                    public void onError(final int code, final String errormsg) {                                        runOnUiThread(new Runnable() {                                            @Override                                            public void run() {                                                if(code == 404){                                                    Intent intent = new Intent(MipcaActivityCapture.this, ScanErrorActivity.class);                                                    intent.putExtra("ScanString",jumpurl);                                                    intent.putExtra("ErrorString",errormsg);                                                    MipcaActivityCapture.this.startActivity(intent);                                                    finish();                                                }                                                else {                                                    Toast.makeText(MipcaActivityCapture.this, errormsg, Toast.LENGTH_SHORT).show();                                                    MipcaActivityCapture.this.finish();                                                }                                            }                                        });                                    }                                });                            } else {                                Toast.makeText(MipcaActivityCapture.this, SCExceptionCodeList.getExceptionMsg(resultcode), Toast.LENGTH_SHORT).show();                                MipcaActivityCapture.this.finish();                            }                        }                    });                }            });            //viewfinderView.setVisibility(View.GONE);//            surfaceView.setVisibility(View.GONE);//            jumpView.setVisibility(View.VISIBLE);        } else {            //扫描结果加入list中            if (!scanlist.contains(scanstr)) {                scanlist.add(scanstr);            }            //弹窗提示是否继续扫描            AlertDialog.Builder builder = new AlertDialog.Builder(MipcaActivityCapture.this);            builder.setTitle("提示");            builder.setMessage("扫描结果:" + scanstr + ",是否继续扫描?");            builder.setPositiveButton("继续", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    SurfaceHolder surfaceHolder = surfaceView.getHolder();                    if (hasSurface) {                        initCamera(surfaceHolder);                    } else {                        surfaceHolder.addCallback(MipcaActivityCapture.this);                        surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);                    }                    decodeFormats = null;                    characterSet = null;                }            });            builder.setNegativeButton("结束", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    Intent data = new Intent();                    data.putStringArrayListExtra("modellist", scanlist);                    setResult(RESULT_OK, data);                    MipcaActivityCapture.this.finish();                }            });            AlertDialog alert = builder.create();            alert.show();        }    }    private void ShowInout(String qrcode) {        Intent scanqr = new Intent(MipcaActivityCapture.this, ScanInoutStoreActivity.class);        scanqr.putExtra("scanQRcode", qrcode);        startActivity(scanqr);        MipcaActivityCapture.this.finish();    }    private void ShowProduct(String productid) {        Intent productintent = new Intent(MipcaActivityCapture.this, ProductDetailActivity.class);        productintent.putExtra("productid", productid);        startActivity(productintent);        MipcaActivityCapture.this.finish();    }    private void ShowModel(String modelid) {        Intent productintent = new Intent(MipcaActivityCapture.this, ModelDetailActivity.class);        productintent.putExtra("productid", modelid);        startActivity(productintent);        MipcaActivityCapture.this.finish();    }    private void ShowBatch(String modelid) {        Intent productintent = new Intent(MipcaActivityCapture.this,BatchStoreActivity.class);        productintent.putExtra("productid", modelid);        startActivity(productintent);        MipcaActivityCapture.this.finish();    }    private void initCamera(SurfaceHolder surfaceHolder) {        try {            CameraManager.get().openDriver(surfaceHolder);        } catch (IOException ioe) {            return;        } catch (RuntimeException e) {            return;        }        if (handler == null) {            handler = new CaptureActivityHandler(this, decodeFormats,                    characterSet);        }    }    @Override    public void surfaceChanged(SurfaceHolder holder, int format, int width,                               int height) {    }    @Override    public void surfaceCreated(SurfaceHolder holder) {        if (!hasSurface) {            hasSurface = true;            initCamera(holder);        }    }    @Override    public void surfaceDestroyed(SurfaceHolder holder) {        hasSurface = false;    }    public ViewfinderView getViewfinderView() {        return viewfinderView;    }    public Handler getHandler() {        return handler;    }    public void drawViewfinder() {        viewfinderView.drawViewfinder();    }}